"""
Django settings for shop_site project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os.path
import sys
from pathlib import Path
from dotenv import load_dotenv
import sentry_sdk


load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'backend',
    'debug_toolbar',
    'rest_framework',
    'django_filters',

    'rest_framework.authtoken',
    'django_rest_passwordreset',

    'drf_yasg',

    'oauth2_provider',
    'social_django',
    'rest_framework_social_oauth2',

    'imagekit',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shop_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.backends',            # google auth
                'social_django.context_processors.login_redirect',      # google auth
            ],
        },
    },
]

WSGI_APPLICATION = 'shop_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if 'pytest' in sys.argv:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('ENGINE'),
            'NAME': os.getenv('POSTGRES_DB'),
            'HOST': os.getenv('POSTGRES_HOST'),
            'PORT': os.getenv('POSTGRES_PORT'),
            'USER': os.getenv('POSTGRES_USER'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru-RU'
# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'
TIMEDELTA_FOR_ORDER_EMAIL = 3  # +3 UTC для отправки писем со статусом заказа

USE_I18N = True

USE_TZ = True
DATETIME_FORMAT = 'd E Y H:i'

AUTH_USER_MODEL = 'backend.User'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# smtp для отправки email в сигналах
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_USE_SSL = True
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
SERVER_EMAIL = EMAIL_HOST_USER

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    '127.0.0.1',
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework_social_oauth2.authentication.SocialAuthentication',
    ),
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.UserRateThrottle',
    #     # 'rest_framework.throttling.AnonRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '3/minute',
    #     'anon': '200/minute'
    # },
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': [
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer'
    ]
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}

# настройки для работы с vk
SOCIAL_AUTH_VK_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_VK_OAUTH2_KEY')          # id vk приложения
SOCIAL_AUTH_VK_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_VK_OAUTH2_SECRET')    # ключ к нему защищенный
SOCIAL_AUTH_POSTGRES_JSONFIELD = True                                       # для postgres

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',            # backend классической аутентификации, чтобы работала
                                                            # авторизация через обычный логин и пароль
    'social_core.backends.vk.VKOAuth2',                     # backend авторизации через ВКонтакте
    'rest_framework_social_oauth2.backends.DjangoOAuth2',

)

SOCIAL_AUTH_VK_OAUTH2_SCOPE = [
    'email',
]
SOCIAL_AUTH_VK_EXTRA_DATA = [
    ('email', 'email'),
]

# REDIS settings
# Настройки Redis условные, могут отличатся в зависимости от конфигурации
# REDIS_HOST = '127.0.0.1'
# REDIS_PORT = '6379'

# CELERY settings
CELERY_BROKER_URL = os.getenv('BROKER')
CELERY_BROKER_TRANSPORT_OPTION = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = os.getenv('BACKEND')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ENABLED=True

# настройки sentry
sentry_sdk.init(
    dsn=os.getenv('SENTRY_DSN'),
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

# настройки django-jet-reboot
JET_SIDE_MENU_COMPACT = True
JET_DEFAULT_THEME = 'light-gray'
JET_THEMES = [
    {
        'theme': 'default', # название папки с темой
        'color': '#47bac1', # цвет кнопки выбора темы в пользовательском меню
        'title': 'Default' # название темы
    },
    {
        'theme': 'green',
        'color': '#44b78b',
        'title': 'Green'
    },
    {
        'theme': 'light-green',
        'color': '#2faa60',
        'title': 'Light Green'
    },
    {
        'theme': 'light-violet',
        'color': '#a464c4',
        'title': 'Light Violet'
    },
    {
        'theme': 'light-blue',
        'color': '#5EADDE',
        'title': 'Light Blue'
    },
    {
        'theme': 'light-gray',
        'color': '#222',
        'title': 'Light Gray'
    }
]
JET_SIDE_MENU_ITEMS = [  # Список приложений или пользовательских элементов dict
    {'label': 'Пользователи', 'items': [
        {'name': 'User', 'label': 'Данные пользователей', 'url': '/admin/backend/user/'},
        {'name': 'Contact', 'label': 'Контакты пользователей', 'url': '/admin/backend/contact/'},
    ]},
    {'label': 'Токены', 'items': [
        {'name': 'Token', 'label': 'Токены аутентификации', 'url': '/admin/authtoken/token/'},
        {'name': 'ConfirmEmailToken', 'label': 'Токены подтверждения email', 'url': '/admin/backend/confirmemailtoken/'},
        {'label': 'Токены сброса пароля', 'url': '/admin/django_rest_passwordreset/resetpasswordtoken/'},
    ]},
    {'label': 'Магазин', 'items': [
        {'name': 'ProductInfo', 'label': 'Все товары с описанием', 'url': '/admin/backend/productinfo/'},
        {'name': 'Category', 'label': 'Категории', 'url': '/admin/backend/category/'},
        {'name': 'Product', 'label': 'Продукция', 'url': '/admin/backend/product/'},
        {'name': 'Parameter', 'label': 'Параметры товаров', 'url': '/admin/backend/parameter/'},
        {'name': 'Shop', 'label': 'Все магазины', 'url': '/admin/backend/shop/'},
    ]},
    {'label': 'Заказы', 'items': [
        {'name': 'Order', 'label': 'Заказы клиентов', 'url': '/admin/backend/order/'},
        {'name': 'RatingProduct', 'label': 'Оценки и отзывы', 'url': '/admin/backend/ratingproduct/'},
    ]}
]
