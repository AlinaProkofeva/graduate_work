version: "3.9"

volumes:
  pgdata:
  static_volume:
  media_volume:

services:
  backend:
    build: .
    container_name: backend_app_2
    volumes:
      - static_volume:/code/static/
      - media_volume:/code/media/
    command: sh -c "./manage.py collectstatic --noinput && ./manage.py migrate && ./manage.py initadmin && gunicorn --bind 0.0.0.0:8000 shop_site.wsgi:application"
    ports:
      - "8000:8000"
    depends_on:
      - postgredb
      - redis

  postgredb:
    image: postgres
    container_name: postgredb_2
    restart: unless-stopped
    volumes:
      - .:/docker-entrypoint-initdb.d
      - pgdata:/var/lib/postgresql/data
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${TEST_SUPERUSER_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${TEST_SUPERUSER_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgredb
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 4G

  nginx:
    build:
      dockerfile: Dockerfile
      context: ./docker/nginx/
    container_name: nginx_2
    volumes:
      - static_volume:/code/static/
      - media_volume:/code/media/
    ports:
      - "${NGINX_EXTERNAL_PORT}:80"
    depends_on:
      - backend

  redis:
    image: redis
    container_name: redis_2
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
    container_name: celery_2
    environment:
      BACKEND: ${BACKEND}
      BROKER: ${BROKER}
    entrypoint: celery -A shop_site worker
    depends_on:
      - redis
      - backend

  sentry:
    image: sentry
    container_name: sentry
    restart: always
    links:
      - redis
      - postgredb
    ports:
      - 9000:9000
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: postgredb
      SENTRY_DB_USER: ${POSTGRES_USER}
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_REDIS_HOST: redis
    depends_on:
      - postgredb
      - redis
